# entry_list(reversed)
#-*- coding: utf-8 -*-
#!rendering: self

import re
import os

class EntryListRenderer(object):
    def __init__(self, context):
        self.context = context

    def _parseTitle(self, line):
        cats = []
        in_cat = False
        tmp  = ''

        for c in line:
            if not in_cat and c == '[' : in_cat = True
            elif in_cat and c == ']':
                cats.append(tmp.strip())
                in_cat = False
                tmp = ''
            else: tmp += c
        return (cats, tmp.strip()) # ([cat:string], title:string)


    def renderViewPage(self, html, filepath):
        html.writeTag('h1', '一覧（逆順）')

        html.writeOpenTag('p')
        html.writeTag('a', '新しい記事を作る',
                      {'href': self.context.url_mapper.getEntryCreatePageUrl()})
        html.writeCloseTag('p')

        html.writeOpenTag('table', {'border':'1'})
        for dpath, dirs, files in os.walk(self.context.contents_dir):
            files.sort()
            files.reverse()

            for fpath in files:
                if re.match(r"^[0-9]+_[0-9]+$", fpath) == None:
                    continue

                path = os.path.join(dpath, fpath)
                f = open(path, 'r')
                headline = f.readline().strip()
                if len(headline) == 0:
                    headline = '(無題)'
                elif headline[0] == '*':
                    headline = headline[1:]
                cats, title = self._parseTitle(headline)

                html.writeOpenTag('tr')
                html.writeTag('td', '%s-%s-%s' % (fpath[:4],fpath[4:6],fpath[6:8]) )
                html.writeOpenTag('td')
                html.writeTag('a', title,
                              {'href': self.context.url_mapper.getEntryPageUrl(fpath)})
                html.writeTag('div', ', '.join(cats), {'style':'color:gray; font-size:0.8em'})

                html.writeCloseTag('td')
                html.writeCloseTag('tr')
                f.close()
        html.writeCloseTag('table')

def createRenderer(mapper):
    return EntryListRenderer(mapper)

